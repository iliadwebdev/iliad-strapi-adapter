// This file is generated by a script (typeSync.ts) in the associate Strapi instance. Do not modify it directly.
// Generated on: Sat, 28 Dec 2024 19:29:52 GMT

import type { Schema, Attribute } from "@strapi/strapi";

export interface EventsVenue extends Schema.Component {
  collectionName: "components_events_venues";
  info: {
    displayName: "Venue";
    icon: "archive";
    description: "";
  };
  attributes: {
    price: Attribute.Decimal &
      Attribute.SetMinMax<{
        min: 0;
      }>;
    title: Attribute.String &
      Attribute.Required &
      Attribute.CustomField<
        "plugin::bold-title-editor.title",
        {
          output: "html";
        }
      >;
    description: Attribute.RichText & Attribute.Required;
    buttons: Attribute.Component<"misc.button", true> &
      Attribute.SetMinMax<{
        max: 2;
      }>;
    startDateTime: Attribute.DateTime & Attribute.Required;
    endDateTime: Attribute.DateTime & Attribute.Required;
    coverImage: Attribute.Media;
  };
}

export interface HomepageFeaturedContent extends Schema.Component {
  collectionName: "components_homepage_featured_contents";
  info: {
    displayName: "Featured Content";
    icon: "oneToMany";
  };
  attributes: {};
}

export interface HomepageStatistic extends Schema.Component {
  collectionName: "components_homepage_statistics";
  info: {
    displayName: "Statistic";
    icon: "information";
    description: "";
  };
  attributes: {
    value: Attribute.String & Attribute.Required;
    label: Attribute.Text &
      Attribute.Required &
      Attribute.SetMinMaxLength<{
        maxLength: 128;
      }>;
  };
}

export interface LlmLlmSnippet extends Schema.Component {
  collectionName: "components_llm_llm_snippets";
  info: {
    displayName: "LLM Snippet";
    icon: "alien";
  };
  attributes: {
    snippetContent: Attribute.Text;
  };
}

export interface MiscButton extends Schema.Component {
  collectionName: "components_misc_buttons";
  info: {
    displayName: "Button";
    icon: "arrowRight";
    description: "";
  };
  attributes: {
    text: Attribute.String;
    link: Attribute.Text & Attribute.Required;
    icon: Attribute.String & Attribute.CustomField<"plugin::react-icons.icon">;
  };
}

export interface MiscSocialMedia extends Schema.Component {
  collectionName: "components_misc_social_medias";
  info: {
    displayName: "Social Media";
    icon: "manyToMany";
  };
  attributes: {
    socialMediaProvider: Attribute.String;
    socialMediaLink: Attribute.String;
    socialMediaIcon: Attribute.String &
      Attribute.CustomField<"plugin::react-icons.icon">;
  };
}

export interface SharedMetaSocial extends Schema.Component {
  collectionName: "components_shared_meta_socials";
  info: {
    displayName: "metaSocial";
    icon: "project-diagram";
    description: "";
  };
  attributes: {
    socialNetwork: Attribute.Enumeration<["Facebook", "Discord", "Twitter"]> &
      Attribute.Required;
    title: Attribute.String &
      Attribute.Required &
      Attribute.SetMinMaxLength<{
        maxLength: 60;
      }>;
    description: Attribute.String &
      Attribute.Required &
      Attribute.SetMinMaxLength<{
        maxLength: 65;
      }>;
    image: Attribute.Media;
  };
}

export interface SharedSeo extends Schema.Component {
  collectionName: "components_shared_seos";
  info: {
    displayName: "seo";
    icon: "search";
  };
  attributes: {
    metaTitle: Attribute.String &
      Attribute.Required &
      Attribute.SetMinMaxLength<{
        maxLength: 60;
      }>;
    metaDescription: Attribute.String &
      Attribute.Required &
      Attribute.SetMinMaxLength<{
        minLength: 50;
        maxLength: 160;
      }>;
    metaImage: Attribute.Media;
    metaSocial: Attribute.Component<"shared.meta-social", true>;
    keywords: Attribute.Text;
    metaRobots: Attribute.String;
    structuredData: Attribute.JSON;
    metaViewport: Attribute.String;
    canonicalURL: Attribute.String;
  };
}

export interface SinglePageComponentsFrequentlyAskedQuestion
  extends Schema.Component {
  collectionName: "components_single_page_components_frequently_asked_questions";
  info: {
    displayName: "Frequently Asked Question";
    icon: "question";
  };
  attributes: {
    question: Attribute.Text & Attribute.Required;
    answer: Attribute.RichText & Attribute.Required;
  };
}

export interface SinglePageComponentsMembershipBenefit
  extends Schema.Component {
  collectionName: "components_single_page_components_membership_benefits";
  info: {
    displayName: "Membership Benefit";
    icon: "emotionHappy";
  };
  attributes: {
    title: Attribute.String & Attribute.Required;
    description: Attribute.Text & Attribute.Required;
    link: Attribute.String;
    icon: Attribute.String &
      Attribute.Required &
      Attribute.CustomField<"plugin::react-icons.icon">;
  };
}

export interface SiteConfigContactInfo extends Schema.Component {
  collectionName: "components_site_config_contact_infos";
  info: {
    displayName: "Contact Info";
    icon: "phone";
  };
  attributes: {
    address: Attribute.String;
    zipCode: Attribute.String;
    city: Attribute.String;
    state: Attribute.String;
    emailAddress: Attribute.String;
    phoneNumber: Attribute.String;
    availability: Attribute.String;
  };
}

declare module "@strapi/types" {
  export module Shared {
    export interface Components {
      "events.venue": EventsVenue;
      "homepage.featured-content": HomepageFeaturedContent;
      "homepage.statistic": HomepageStatistic;
      "llm.llm-snippet": LlmLlmSnippet;
      "misc.button": MiscButton;
      "misc.social-media": MiscSocialMedia;
      "shared.meta-social": SharedMetaSocial;
      "shared.seo": SharedSeo;
      "single-page-components.frequently-asked-question": SinglePageComponentsFrequentlyAskedQuestion;
      "single-page-components.membership-benefit": SinglePageComponentsMembershipBenefit;
      "site-config.contact-info": SiteConfigContactInfo;
    }
  }
}

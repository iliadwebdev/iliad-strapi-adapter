// This file is generated by a script (typeSync.ts) in the associate Strapi instance. Do not modify it directly.
// Generated on: Sat, 28 Dec 2024 19:29:52 GMT

import type { Schema, Attribute } from "@strapi/strapi";

export interface AdminPermission extends Schema.CollectionType {
  collectionName: "admin_permissions";
  info: {
    name: "Permission";
    description: "";
    singularName: "permission";
    pluralName: "permissions";
    displayName: "Permission";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    action: Attribute.String &
      Attribute.Required &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }>;
    actionParameters: Attribute.JSON & Attribute.DefaultTo<{}>;
    subject: Attribute.String &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }>;
    properties: Attribute.JSON & Attribute.DefaultTo<{}>;
    conditions: Attribute.JSON & Attribute.DefaultTo<[]>;
    role: Attribute.Relation<"admin::permission", "manyToOne", "admin::role">;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "admin::permission",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "admin::permission",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface AdminUser extends Schema.CollectionType {
  collectionName: "admin_users";
  info: {
    name: "User";
    description: "";
    singularName: "user";
    pluralName: "users";
    displayName: "User";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    firstname: Attribute.String &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }>;
    lastname: Attribute.String &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }>;
    username: Attribute.String;
    email: Attribute.Email &
      Attribute.Required &
      Attribute.Private &
      Attribute.Unique &
      Attribute.SetMinMaxLength<{
        minLength: 6;
      }>;
    password: Attribute.Password &
      Attribute.Private &
      Attribute.SetMinMaxLength<{
        minLength: 6;
      }>;
    resetPasswordToken: Attribute.String & Attribute.Private;
    registrationToken: Attribute.String & Attribute.Private;
    isActive: Attribute.Boolean &
      Attribute.Private &
      Attribute.DefaultTo<false>;
    roles: Attribute.Relation<"admin::user", "manyToMany", "admin::role"> &
      Attribute.Private;
    blocked: Attribute.Boolean & Attribute.Private & Attribute.DefaultTo<false>;
    preferedLanguage: Attribute.String;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<"admin::user", "oneToOne", "admin::user"> &
      Attribute.Private;
    updatedBy: Attribute.Relation<"admin::user", "oneToOne", "admin::user"> &
      Attribute.Private;
  };
}

export interface AdminRole extends Schema.CollectionType {
  collectionName: "admin_roles";
  info: {
    name: "Role";
    description: "";
    singularName: "role";
    pluralName: "roles";
    displayName: "Role";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    name: Attribute.String &
      Attribute.Required &
      Attribute.Unique &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }>;
    code: Attribute.String &
      Attribute.Required &
      Attribute.Unique &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }>;
    description: Attribute.String;
    users: Attribute.Relation<"admin::role", "manyToMany", "admin::user">;
    permissions: Attribute.Relation<
      "admin::role",
      "oneToMany",
      "admin::permission"
    >;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<"admin::role", "oneToOne", "admin::user"> &
      Attribute.Private;
    updatedBy: Attribute.Relation<"admin::role", "oneToOne", "admin::user"> &
      Attribute.Private;
  };
}

export interface AdminApiToken extends Schema.CollectionType {
  collectionName: "strapi_api_tokens";
  info: {
    name: "Api Token";
    singularName: "api-token";
    pluralName: "api-tokens";
    displayName: "Api Token";
    description: "";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    name: Attribute.String &
      Attribute.Required &
      Attribute.Unique &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }>;
    description: Attribute.String &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }> &
      Attribute.DefaultTo<"">;
    type: Attribute.Enumeration<["read-only", "full-access", "custom"]> &
      Attribute.Required &
      Attribute.DefaultTo<"read-only">;
    accessKey: Attribute.String &
      Attribute.Required &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }>;
    lastUsedAt: Attribute.DateTime;
    permissions: Attribute.Relation<
      "admin::api-token",
      "oneToMany",
      "admin::api-token-permission"
    >;
    expiresAt: Attribute.DateTime;
    lifespan: Attribute.BigInteger;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "admin::api-token",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "admin::api-token",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface AdminApiTokenPermission extends Schema.CollectionType {
  collectionName: "strapi_api_token_permissions";
  info: {
    name: "API Token Permission";
    description: "";
    singularName: "api-token-permission";
    pluralName: "api-token-permissions";
    displayName: "API Token Permission";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    action: Attribute.String &
      Attribute.Required &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }>;
    token: Attribute.Relation<
      "admin::api-token-permission",
      "manyToOne",
      "admin::api-token"
    >;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "admin::api-token-permission",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "admin::api-token-permission",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface AdminTransferToken extends Schema.CollectionType {
  collectionName: "strapi_transfer_tokens";
  info: {
    name: "Transfer Token";
    singularName: "transfer-token";
    pluralName: "transfer-tokens";
    displayName: "Transfer Token";
    description: "";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    name: Attribute.String &
      Attribute.Required &
      Attribute.Unique &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }>;
    description: Attribute.String &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }> &
      Attribute.DefaultTo<"">;
    accessKey: Attribute.String &
      Attribute.Required &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }>;
    lastUsedAt: Attribute.DateTime;
    permissions: Attribute.Relation<
      "admin::transfer-token",
      "oneToMany",
      "admin::transfer-token-permission"
    >;
    expiresAt: Attribute.DateTime;
    lifespan: Attribute.BigInteger;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "admin::transfer-token",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "admin::transfer-token",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface AdminTransferTokenPermission extends Schema.CollectionType {
  collectionName: "strapi_transfer_token_permissions";
  info: {
    name: "Transfer Token Permission";
    description: "";
    singularName: "transfer-token-permission";
    pluralName: "transfer-token-permissions";
    displayName: "Transfer Token Permission";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    action: Attribute.String &
      Attribute.Required &
      Attribute.SetMinMaxLength<{
        minLength: 1;
      }>;
    token: Attribute.Relation<
      "admin::transfer-token-permission",
      "manyToOne",
      "admin::transfer-token"
    >;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "admin::transfer-token-permission",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "admin::transfer-token-permission",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginUploadFile extends Schema.CollectionType {
  collectionName: "files";
  info: {
    singularName: "file";
    pluralName: "files";
    displayName: "File";
    description: "";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    name: Attribute.String & Attribute.Required;
    alternativeText: Attribute.String;
    caption: Attribute.String;
    width: Attribute.Integer;
    height: Attribute.Integer;
    formats: Attribute.JSON;
    hash: Attribute.String & Attribute.Required;
    ext: Attribute.String;
    mime: Attribute.String & Attribute.Required;
    size: Attribute.Decimal & Attribute.Required;
    url: Attribute.String & Attribute.Required;
    previewUrl: Attribute.String;
    provider: Attribute.String & Attribute.Required;
    provider_metadata: Attribute.JSON;
    related: Attribute.Relation<"plugin::upload.file", "morphToMany">;
    folder: Attribute.Relation<
      "plugin::upload.file",
      "manyToOne",
      "plugin::upload.folder"
    > &
      Attribute.Private;
    folderPath: Attribute.String &
      Attribute.Required &
      Attribute.Private &
      Attribute.SetMinMax<{
        min: 1;
      }>;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::upload.file",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::upload.file",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    placeholder: Attribute.Text;
  };
}

export interface PluginUploadFolder extends Schema.CollectionType {
  collectionName: "upload_folders";
  info: {
    singularName: "folder";
    pluralName: "folders";
    displayName: "Folder";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    name: Attribute.String &
      Attribute.Required &
      Attribute.SetMinMax<{
        min: 1;
      }>;
    pathId: Attribute.Integer & Attribute.Required & Attribute.Unique;
    parent: Attribute.Relation<
      "plugin::upload.folder",
      "manyToOne",
      "plugin::upload.folder"
    >;
    children: Attribute.Relation<
      "plugin::upload.folder",
      "oneToMany",
      "plugin::upload.folder"
    >;
    files: Attribute.Relation<
      "plugin::upload.folder",
      "oneToMany",
      "plugin::upload.file"
    >;
    path: Attribute.String &
      Attribute.Required &
      Attribute.SetMinMax<{
        min: 1;
      }>;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::upload.folder",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::upload.folder",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginReactIconsIconlibrary extends Schema.CollectionType {
  collectionName: "iconlibrary";
  info: {
    singularName: "iconlibrary";
    pluralName: "iconlibraries";
    displayName: "IconLibrary";
  };
  options: {
    draftAndPublish: false;
    comment: "";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    name: Attribute.String & Attribute.Required;
    abbreviation: Attribute.String &
      Attribute.Required &
      Attribute.Unique &
      Attribute.SetMinMaxLength<{
        maxLength: 3;
      }>;
    isEnabled: Attribute.Boolean & Attribute.DefaultTo<true>;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::react-icons.iconlibrary",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::react-icons.iconlibrary",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginEmailDesignerEmailTemplate
  extends Schema.CollectionType {
  collectionName: "email_templates";
  info: {
    singularName: "email-template";
    pluralName: "email-templates";
    displayName: "Email-template";
    name: "email-template";
  };
  options: {
    draftAndPublish: false;
    timestamps: true;
    increments: true;
    comment: "";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    templateReferenceId: Attribute.Integer & Attribute.Unique;
    design: Attribute.JSON;
    name: Attribute.String;
    subject: Attribute.String;
    bodyHtml: Attribute.Text;
    bodyText: Attribute.Text;
    enabled: Attribute.Boolean & Attribute.DefaultTo<true>;
    tags: Attribute.JSON;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::email-designer.email-template",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::email-designer.email-template",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginSchedulerScheduler extends Schema.CollectionType {
  collectionName: "scheduler_scheduler";
  info: {
    collectionName: "scheduler";
    singularName: "scheduler";
    pluralName: "scheduler";
    displayName: "scheduler";
    description: "";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    uid: Attribute.String & Attribute.Required;
    entryId: Attribute.BigInteger & Attribute.Required;
    type: Attribute.Enumeration<["publish", "archive"]> & Attribute.Required;
    datetime: Attribute.DateTime;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::scheduler.scheduler",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::scheduler.scheduler",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginRedirectsRedirect extends Schema.CollectionType {
  collectionName: "redirects";
  info: {
    singularName: "redirect";
    pluralName: "redirects";
    displayName: "redirect";
  };
  options: {
    draftAndPublish: false;
    comment: "";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    from: Attribute.String & Attribute.Required;
    to: Attribute.String & Attribute.Required;
    type: Attribute.Enumeration<
      [
        "found_302",
        "moved_permanently_301",
        "temporary_redirect_307",
        "gone_410",
        "unavailable_for_legal_reasons_451",
      ]
    > &
      Attribute.Required &
      Attribute.DefaultTo<"found_302">;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::redirects.redirect",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::redirects.redirect",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginMenusMenuItem extends Schema.CollectionType {
  collectionName: "menu_items";
  info: {
    name: "MenuItem";
    displayName: "Menu Item";
    singularName: "menu-item";
    pluralName: "menu-items";
    tableName: "menu_items";
  };
  options: {
    draftAndPublish: false;
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    order: Attribute.Integer;
    title: Attribute.String & Attribute.Required;
    url: Attribute.String;
    target: Attribute.Enumeration<["_blank", "_parent", "_self", "_top"]>;
    root_menu: Attribute.Relation<
      "plugin::menus.menu-item",
      "manyToOne",
      "plugin::menus.menu"
    > &
      Attribute.Required;
    parent: Attribute.Relation<
      "plugin::menus.menu-item",
      "oneToOne",
      "plugin::menus.menu-item"
    >;
    featured_image: Attribute.Media;
    featured_text: Attribute.String;
    featured_link: Attribute.String;
    footer_text: Attribute.String;
    icon: Attribute.String & Attribute.CustomField<"plugin::react-icons.icon">;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::menus.menu-item",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::menus.menu-item",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginMenusMenu extends Schema.CollectionType {
  collectionName: "menus";
  info: {
    name: "Menu";
    displayName: "Menu";
    singularName: "menu";
    pluralName: "menus";
    tableName: "menus";
  };
  options: {
    draftAndPublish: false;
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    title: Attribute.String & Attribute.Required;
    slug: Attribute.UID<"plugin::menus.menu", "title"> & Attribute.Required;
    items: Attribute.Relation<
      "plugin::menus.menu",
      "oneToMany",
      "plugin::menus.menu-item"
    >;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::menus.menu",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::menus.menu",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginI18NLocale extends Schema.CollectionType {
  collectionName: "i18n_locale";
  info: {
    singularName: "locale";
    pluralName: "locales";
    collectionName: "locales";
    displayName: "Locale";
    description: "";
  };
  options: {
    draftAndPublish: false;
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    name: Attribute.String &
      Attribute.SetMinMax<{
        min: 1;
        max: 50;
      }>;
    code: Attribute.String & Attribute.Unique;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::i18n.locale",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::i18n.locale",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginUsersPermissionsPermission
  extends Schema.CollectionType {
  collectionName: "up_permissions";
  info: {
    name: "permission";
    description: "";
    singularName: "permission";
    pluralName: "permissions";
    displayName: "Permission";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    action: Attribute.String & Attribute.Required;
    role: Attribute.Relation<
      "plugin::users-permissions.permission",
      "manyToOne",
      "plugin::users-permissions.role"
    >;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::users-permissions.permission",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::users-permissions.permission",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginUsersPermissionsRole extends Schema.CollectionType {
  collectionName: "up_roles";
  info: {
    name: "role";
    description: "";
    singularName: "role";
    pluralName: "roles";
    displayName: "Role";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    name: Attribute.String &
      Attribute.Required &
      Attribute.SetMinMaxLength<{
        minLength: 3;
      }>;
    description: Attribute.String;
    type: Attribute.String & Attribute.Unique;
    permissions: Attribute.Relation<
      "plugin::users-permissions.role",
      "oneToMany",
      "plugin::users-permissions.permission"
    >;
    users: Attribute.Relation<
      "plugin::users-permissions.role",
      "oneToMany",
      "plugin::users-permissions.user"
    >;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::users-permissions.role",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::users-permissions.role",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginUsersPermissionsUser extends Schema.CollectionType {
  collectionName: "up_users";
  info: {
    name: "user";
    description: "";
    singularName: "user";
    pluralName: "users";
    displayName: "User";
  };
  options: {
    draftAndPublish: false;
    timestamps: true;
  };
  attributes: {
    username: Attribute.String &
      Attribute.Required &
      Attribute.Unique &
      Attribute.SetMinMaxLength<{
        minLength: 3;
      }>;
    email: Attribute.Email &
      Attribute.Required &
      Attribute.SetMinMaxLength<{
        minLength: 6;
      }>;
    provider: Attribute.String;
    password: Attribute.Password &
      Attribute.Private &
      Attribute.SetMinMaxLength<{
        minLength: 6;
      }>;
    resetPasswordToken: Attribute.String & Attribute.Private;
    confirmationToken: Attribute.String & Attribute.Private;
    confirmed: Attribute.Boolean & Attribute.DefaultTo<false>;
    blocked: Attribute.Boolean & Attribute.DefaultTo<false>;
    role: Attribute.Relation<
      "plugin::users-permissions.user",
      "manyToOne",
      "plugin::users-permissions.role"
    >;
    member: Attribute.Relation<
      "plugin::users-permissions.user",
      "oneToOne",
      "api::member.member"
    >;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::users-permissions.user",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::users-permissions.user",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginStrapiLeafletGeomanConfig extends Schema.SingleType {
  collectionName: "strapi_leaflet_geoman_config";
  info: {
    singularName: "config";
    pluralName: "configs";
    displayName: "Strapi Leaflet Geoman Config";
  };
  options: {
    populateCreatorFields: false;
    draftAndPublish: false;
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    defaultLatitude: Attribute.Decimal &
      Attribute.Required &
      Attribute.DefaultTo<42>;
    defaultLongitude: Attribute.Decimal &
      Attribute.Required &
      Attribute.DefaultTo<42>;
    defaultZoom: Attribute.Integer &
      Attribute.Required &
      Attribute.DefaultTo<6>;
    defaultTileURL: Attribute.String &
      Attribute.Required &
      Attribute.DefaultTo<"https://tile.openstreetmap.org/{z}/{x}/{y}.png">;
    defaultTileAttribution: Attribute.String &
      Attribute.Required &
      Attribute.DefaultTo<"Map data \u00A9 <a href='https://www.openstreetmap.org'>OpenStreetMap</a> contributors">;
    defaultTileAccessToken: Attribute.String & Attribute.DefaultTo<"">;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::strapi-leaflet-geoman.config",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::strapi-leaflet-geoman.config",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface PluginPublisherAction extends Schema.CollectionType {
  collectionName: "actions";
  info: {
    singularName: "action";
    pluralName: "actions";
    displayName: "actions";
  };
  options: {
    draftAndPublish: false;
    comment: "";
  };
  pluginOptions: {
    "content-manager": {
      visible: false;
    };
    "content-type-builder": {
      visible: false;
    };
  };
  attributes: {
    executeAt: Attribute.DateTime;
    mode: Attribute.String;
    entityId: Attribute.Integer;
    entitySlug: Attribute.String;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "plugin::publisher.action",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "plugin::publisher.action",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiArticleArticle extends Schema.CollectionType {
  collectionName: "articles";
  info: {
    singularName: "article";
    pluralName: "articles";
    displayName: "Article";
    description: "";
  };
  options: {
    draftAndPublish: true;
  };
  attributes: {
    derived_data: Attribute.JSON;
    title: Attribute.String &
      Attribute.CustomField<
        "plugin::bold-title-editor.title",
        {
          output: "html";
        }
      >;
    body: Attribute.RichText &
      Attribute.CustomField<
        "plugin::plugin-atlas-ckeditor.CKEditor",
        {
          output: "HTML";
          preset: "rich";
        }
      >;
    image: Attribute.Media & Attribute.Required;
    slug: Attribute.UID<"api::article.article", "plainTitle"> &
      Attribute.Required;
    description: Attribute.Text & Attribute.Required;
    externalLink: Attribute.String;
    plainTitle: Attribute.String & Attribute.Private;
    readTimeEstimateMinutes: Attribute.BigInteger & Attribute.DefaultTo<"0">;
    seo: Attribute.Component<"shared.seo">;
    testx: Attribute.String;
    testa: Attribute.String;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    publishedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::article.article",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::article.article",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiArticlesPageArticlesPage extends Schema.SingleType {
  collectionName: "articles_pages";
  info: {
    singularName: "articles-page";
    pluralName: "articles-pages";
    displayName: "Articles Page";
  };
  options: {
    draftAndPublish: false;
  };
  attributes: {
    featuredArticle: Attribute.Relation<
      "api::articles-page.articles-page",
      "oneToOne",
      "api::article.article"
    >;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::articles-page.articles-page",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::articles-page.articles-page",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiEventEvent extends Schema.CollectionType {
  collectionName: "events";
  info: {
    singularName: "event";
    pluralName: "events";
    displayName: "Event";
    description: "";
  };
  options: {
    draftAndPublish: true;
  };
  attributes: {
    title: Attribute.String &
      Attribute.Required &
      Attribute.CustomField<
        "plugin::bold-title-editor.title",
        {
          output: "html";
        }
      >;
    description: Attribute.RichText & Attribute.Required;
    invitationToSponsor: Attribute.Boolean &
      Attribute.Required &
      Attribute.DefaultTo<true>;
    funders: Attribute.Relation<
      "api::event.event",
      "manyToMany",
      "api::funder.funder"
    >;
    body: Attribute.RichText &
      Attribute.CustomField<
        "plugin::plugin-atlas-ckeditor.CKEditor",
        {
          output: "HTML";
          preset: "rich";
        }
      >;
    specialNotices: Attribute.JSON &
      Attribute.CustomField<
        "plugin::multi-select.multi-select",
        [
          "Limited Seating:limited-seats",
          "Adults Only:adults-only",
          "Discounted Pricing:discounted-pricing",
        ]
      >;
    slug: Attribute.UID<"api::event.event", "plainTitle"> & Attribute.Required;
    venues: Attribute.Component<"events.venue", true> &
      Attribute.Required &
      Attribute.SetMinMax<{
        min: 1;
      }>;
    coverImage: Attribute.Media & Attribute.Required;
    earliestVenueStart: Attribute.DateTime;
    latestVenueEnd: Attribute.DateTime;
    status: Attribute.Enumeration<["UPCOMING", "CURRENT", "EXPIRED"]>;
    linkedGallery: Attribute.Relation<
      "api::event.event",
      "oneToOne",
      "api::gallery.gallery"
    >;
    plainTitle: Attribute.String & Attribute.Private;
    seo: Attribute.Component<"shared.seo">;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    publishedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::event.event",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::event.event",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiFunderFunder extends Schema.CollectionType {
  collectionName: "funders";
  info: {
    singularName: "funder";
    pluralName: "funders";
    displayName: "Funder";
    description: "";
  };
  options: {
    draftAndPublish: true;
  };
  attributes: {
    name: Attribute.String & Attribute.Required;
    link: Attribute.String;
    logo: Attribute.Media & Attribute.Required;
    sponsored_events: Attribute.Relation<
      "api::funder.funder",
      "manyToMany",
      "api::event.event"
    >;
    backgroundColor: Attribute.String &
      Attribute.CustomField<"plugin::color-picker.color">;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    publishedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::funder.funder",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::funder.funder",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiGalleryGallery extends Schema.CollectionType {
  collectionName: "galleries";
  info: {
    singularName: "gallery";
    pluralName: "galleries";
    displayName: "Gallery";
    description: "";
  };
  options: {
    draftAndPublish: true;
  };
  attributes: {
    title: Attribute.String &
      Attribute.Required &
      Attribute.CustomField<
        "plugin::bold-title-editor.title",
        {
          output: "html";
        }
      >;
    galleryImages: Attribute.Media & Attribute.Required;
    slug: Attribute.UID<"api::gallery.gallery", "plainTitle"> &
      Attribute.Required;
    coverImage: Attribute.Media;
    publicationDate: Attribute.Date &
      Attribute.Required &
      Attribute.DefaultTo<"2024-11-12">;
    linkedEvent: Attribute.Relation<
      "api::gallery.gallery",
      "oneToOne",
      "api::event.event"
    >;
    plainTitle: Attribute.String & Attribute.Private;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    publishedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::gallery.gallery",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::gallery.gallery",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiHomePageHomePage extends Schema.SingleType {
  collectionName: "home_pages";
  info: {
    singularName: "home-page";
    pluralName: "home-pages";
    displayName: "Home Page";
    description: "";
  };
  options: {
    draftAndPublish: false;
  };
  attributes: {
    eventPosters: Attribute.Media;
    featuredStats: Attribute.Component<"homepage.statistic", true> &
      Attribute.Required &
      Attribute.SetMinMax<{
        min: 3;
        max: 3;
      }>;
    featuredArticle: Attribute.Relation<
      "api::home-page.home-page",
      "oneToOne",
      "api::article.article"
    >;
    featuredEvent: Attribute.Relation<
      "api::home-page.home-page",
      "oneToOne",
      "api::event.event"
    >;
    featuredGallery: Attribute.Relation<
      "api::home-page.home-page",
      "oneToOne",
      "api::gallery.gallery"
    >;
    featuredFunders: Attribute.Relation<
      "api::home-page.home-page",
      "oneToMany",
      "api::funder.funder"
    >;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::home-page.home-page",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::home-page.home-page",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiLlmSnippetLlmSnippet extends Schema.CollectionType {
  collectionName: "llm_snippets";
  info: {
    singularName: "llm-snippet";
    pluralName: "llm-snippets";
    displayName: "LLM Snippet";
    description: "";
  };
  options: {
    draftAndPublish: false;
  };
  attributes: {
    data: Attribute.Text;
    contentType: Attribute.String & Attribute.Private;
    field: Attribute.String & Attribute.Private;
    entryId: Attribute.Integer & Attribute.Private;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::llm-snippet.llm-snippet",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::llm-snippet.llm-snippet",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiMediaPageMediaPage extends Schema.SingleType {
  collectionName: "media_pages";
  info: {
    singularName: "media-page";
    pluralName: "media-pages";
    displayName: "Media Page";
  };
  options: {
    draftAndPublish: false;
  };
  attributes: {
    galleries: Attribute.Relation<
      "api::media-page.media-page",
      "oneToMany",
      "api::gallery.gallery"
    >;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::media-page.media-page",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::media-page.media-page",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiMemberMember extends Schema.CollectionType {
  collectionName: "members";
  info: {
    singularName: "member";
    pluralName: "members";
    displayName: "Member";
    description: "";
  };
  options: {
    draftAndPublish: true;
  };
  attributes: {
    firstName: Attribute.String & Attribute.Required;
    lastName: Attribute.String & Attribute.Required;
    users_permissions_user: Attribute.Relation<
      "api::member.member",
      "oneToOne",
      "plugin::users-permissions.user"
    >;
    occupation: Attribute.String & Attribute.Required;
    biography: Attribute.Text;
    titleOrEducation: Attribute.String;
    heroImage: Attribute.Media & Attribute.Required;
    profileImage: Attribute.Media;
    specialTags: Attribute.JSON &
      Attribute.CustomField<
        "plugin::multi-select.multi-select",
        ["Core Art Team:art-team", "Board of Directors:board-of-directors"]
      >;
    fullName: Attribute.String;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    publishedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::member.member",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::member.member",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiMembershipPageMembershipPage extends Schema.SingleType {
  collectionName: "membership_pages";
  info: {
    singularName: "membership-page";
    pluralName: "membership-pages";
    displayName: "Membership Page";
  };
  options: {
    draftAndPublish: true;
  };
  attributes: {
    membershipBenefits: Attribute.Component<
      "single-page-components.membership-benefit",
      true
    >;
    frequentlyAskedQuestions: Attribute.Component<
      "single-page-components.frequently-asked-question",
      true
    >;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    publishedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::membership-page.membership-page",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::membership-page.membership-page",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiPodcastEpisodePodcastEpisode extends Schema.CollectionType {
  collectionName: "podcast_episodes";
  info: {
    singularName: "podcast-episode";
    pluralName: "podcast-episodes";
    displayName: "Podcast Episode";
    description: "";
  };
  options: {
    draftAndPublish: true;
  };
  attributes: {
    title: Attribute.String &
      Attribute.Required &
      Attribute.CustomField<
        "plugin::bold-title-editor.title",
        {
          output: "html";
        }
      >;
    publicationDate: Attribute.Date & Attribute.Required;
    episodeNumber: Attribute.Integer & Attribute.Unique;
    coverImage: Attribute.Media & Attribute.Required;
    featuredImage: Attribute.Media & Attribute.Required;
    derived_data: Attribute.JSON;
    runTimeMs: Attribute.BigInteger;
    description: Attribute.Text & Attribute.Required;
    slug: Attribute.UID & Attribute.Required;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    publishedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::podcast-episode.podcast-episode",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::podcast-episode.podcast-episode",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiSiteConfigSiteConfig extends Schema.SingleType {
  collectionName: "site_configs";
  info: {
    singularName: "site-config";
    pluralName: "site-configs";
    displayName: "Site Config";
    description: "";
  };
  options: {
    draftAndPublish: false;
  };
  attributes: {
    socialMedia: Attribute.Component<"misc.social-media", true>;
    contactInfo: Attribute.Component<"site-config.contact-info">;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::site-config.site-config",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::site-config.site-config",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiSiteConfigAdvancedSiteConfigAdvanced
  extends Schema.SingleType {
  collectionName: "site_config_advanceds";
  info: {
    singularName: "site-config-advanced";
    pluralName: "site-config-advanceds";
    displayName: "Site Config (Advanced)";
    description: "";
  };
  options: {
    draftAndPublish: false;
  };
  attributes: {
    nextRevalidationCallback_dev: Attribute.String;
    nextRevalidationCallback_prod: Attribute.String;
    netlify_fullRebuildEndpoint: Attribute.String;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::site-config-advanced.site-config-advanced",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::site-config-advanced.site-config-advanced",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

export interface ApiStaticLlmSnippetStaticLlmSnippet extends Schema.SingleType {
  collectionName: "static_llm_snippets";
  info: {
    singularName: "static-llm-snippet";
    pluralName: "static-llm-snippets";
    displayName: "Static LLM Snippet";
  };
  options: {
    draftAndPublish: false;
  };
  attributes: {
    llmSnippet: Attribute.Component<"llm.llm-snippet", true>;
    createdAt: Attribute.DateTime;
    updatedAt: Attribute.DateTime;
    createdBy: Attribute.Relation<
      "api::static-llm-snippet.static-llm-snippet",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
    updatedBy: Attribute.Relation<
      "api::static-llm-snippet.static-llm-snippet",
      "oneToOne",
      "admin::user"
    > &
      Attribute.Private;
  };
}

declare module "@strapi/types" {
  export module Shared {
    export interface ContentTypes {
      "admin::permission": AdminPermission;
      "admin::user": AdminUser;
      "admin::role": AdminRole;
      "admin::api-token": AdminApiToken;
      "admin::api-token-permission": AdminApiTokenPermission;
      "admin::transfer-token": AdminTransferToken;
      "admin::transfer-token-permission": AdminTransferTokenPermission;
      "plugin::upload.file": PluginUploadFile;
      "plugin::upload.folder": PluginUploadFolder;
      "plugin::react-icons.iconlibrary": PluginReactIconsIconlibrary;
      "plugin::email-designer.email-template": PluginEmailDesignerEmailTemplate;
      "plugin::scheduler.scheduler": PluginSchedulerScheduler;
      "plugin::redirects.redirect": PluginRedirectsRedirect;
      "plugin::menus.menu-item": PluginMenusMenuItem;
      "plugin::menus.menu": PluginMenusMenu;
      "plugin::i18n.locale": PluginI18NLocale;
      "plugin::users-permissions.permission": PluginUsersPermissionsPermission;
      "plugin::users-permissions.role": PluginUsersPermissionsRole;
      "plugin::users-permissions.user": PluginUsersPermissionsUser;
      "plugin::strapi-leaflet-geoman.config": PluginStrapiLeafletGeomanConfig;
      "plugin::publisher.action": PluginPublisherAction;
      "api::article.article": ApiArticleArticle;
      "api::articles-page.articles-page": ApiArticlesPageArticlesPage;
      "api::event.event": ApiEventEvent;
      "api::funder.funder": ApiFunderFunder;
      "api::gallery.gallery": ApiGalleryGallery;
      "api::home-page.home-page": ApiHomePageHomePage;
      "api::llm-snippet.llm-snippet": ApiLlmSnippetLlmSnippet;
      "api::media-page.media-page": ApiMediaPageMediaPage;
      "api::member.member": ApiMemberMember;
      "api::membership-page.membership-page": ApiMembershipPageMembershipPage;
      "api::podcast-episode.podcast-episode": ApiPodcastEpisodePodcastEpisode;
      "api::site-config.site-config": ApiSiteConfigSiteConfig;
      "api::site-config-advanced.site-config-advanced": ApiSiteConfigAdvancedSiteConfigAdvanced;
      "api::static-llm-snippet.static-llm-snippet": ApiStaticLlmSnippetStaticLlmSnippet;
    }
  }
}

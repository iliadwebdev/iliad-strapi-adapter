// This file is generated by a script (typeSync.ts) in the associate Strapi instance. Do not modify it directly.
// Generated on: Sat, 28 Dec 2024 19:29:52 GMT

declare global {
  export namespace IliadStrapiAdapter {
    interface paths {
      "/articles": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/articles"];
        put?: never;
        post: operations["post/articles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/articles/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/articles/{id}"];
        put: operations["put/articles/{id}"];
        post?: never;
        delete: operations["delete/articles/{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/articles-page": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/articles-page"];
        put: operations["put/articles-page"];
        post?: never;
        delete: operations["delete/articles-page"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/events": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/events"];
        put?: never;
        post: operations["post/events"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/events/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/events/{id}"];
        put: operations["put/events/{id}"];
        post?: never;
        delete: operations["delete/events/{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/funders": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/funders"];
        put?: never;
        post: operations["post/funders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/funders/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/funders/{id}"];
        put: operations["put/funders/{id}"];
        post?: never;
        delete: operations["delete/funders/{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/galleries": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/galleries"];
        put?: never;
        post: operations["post/galleries"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/galleries/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/galleries/{id}"];
        put: operations["put/galleries/{id}"];
        post?: never;
        delete: operations["delete/galleries/{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/home-page": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/home-page"];
        put: operations["put/home-page"];
        post?: never;
        delete: operations["delete/home-page"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/llm-snippets": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/llm-snippets"];
        put?: never;
        post: operations["post/llm-snippets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/llm-snippets/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/llm-snippets/{id}"];
        put: operations["put/llm-snippets/{id}"];
        post?: never;
        delete: operations["delete/llm-snippets/{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/media-page": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/media-page"];
        put: operations["put/media-page"];
        post?: never;
        delete: operations["delete/media-page"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/members": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/members"];
        put?: never;
        post: operations["post/members"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/members/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/members/{id}"];
        put: operations["put/members/{id}"];
        post?: never;
        delete: operations["delete/members/{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/membership-page": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/membership-page"];
        put: operations["put/membership-page"];
        post?: never;
        delete: operations["delete/membership-page"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/podcast-episodes": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/podcast-episodes"];
        put?: never;
        post: operations["post/podcast-episodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/podcast-episodes/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/podcast-episodes/{id}"];
        put: operations["put/podcast-episodes/{id}"];
        post?: never;
        delete: operations["delete/podcast-episodes/{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/site-config": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/site-config"];
        put: operations["put/site-config"];
        post?: never;
        delete: operations["delete/site-config"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/site-config-advanced": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/site-config-advanced"];
        put: operations["put/site-config-advanced"];
        post?: never;
        delete: operations["delete/site-config-advanced"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/static-llm-snippet": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: operations["get/static-llm-snippet"];
        put: operations["put/static-llm-snippet"];
        post?: never;
        delete: operations["delete/static-llm-snippet"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/upload": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upload files */
        post: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          /** @description Upload files */
          requestBody: {
            content: {
              "multipart/form-data": {
                /** @description The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). */
                path?: string;
                /** @description The ID of the entry which the file(s) will be linked to */
                refId?: string;
                /** @description The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant). */
                ref?: string;
                /** @description The field of the entry which the file(s) will be precisely linked to. */
                field?: string;
                files: string[];
              };
            };
          };
          responses: {
            /** @description response */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["UploadFile"][];
              };
            };
          };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/upload?id={id}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upload file information */
        post: {
          parameters: {
            query: {
              /** @description File id */
              id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
          };
          /** @description Upload files */
          requestBody: {
            content: {
              "multipart/form-data": {
                fileInfo?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                };
                /** Format: binary */
                files?: string;
              };
            };
          };
          responses: {
            /** @description response */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["UploadFile"][];
              };
            };
          };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/upload/files": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Get a list of files */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["UploadFile"][];
              };
            };
          };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/upload/files/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get: {
          parameters: {
            query?: never;
            header?: never;
            path: {
              id: string;
            };
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Get a specific file */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["UploadFile"];
              };
            };
          };
        };
        put?: never;
        post?: never;
        delete: {
          parameters: {
            query?: never;
            header?: never;
            path: {
              id: string;
            };
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Delete a file */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["UploadFile"];
              };
            };
          };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/connect/{provider}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        /**
         * Login with a provider
         * @description Redirects to provider login before being redirect to /auth/{provider}/callback
         */
        get: {
          parameters: {
            query?: never;
            header?: never;
            path: {
              /** @description Provider name */
              provider: string;
            };
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Redirect response */
            301: {
              headers: {
                [name: string]: unknown;
              };
              content?: never;
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/auth/local": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Local login
         * @description Returns a jwt token and user info
         */
        post: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody: {
            content: {
              /** @example {
               *       "identifier": "foobar",
               *       "password": "Test1234"
               *     } */
              "application/json": {
                identifier?: string;
                password?: string;
              };
            };
          };
          responses: {
            /** @description Connection */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/auth/local/register": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a user
         * @description Returns a jwt token and user info
         */
        post: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody: {
            content: {
              /** @example {
               *       "username": "foobar",
               *       "email": "foo.bar@strapi.io",
               *       "password": "Test1234"
               *     } */
              "application/json": {
                username?: string;
                email?: string;
                password?: string;
              };
            };
          };
          responses: {
            /** @description Successful registration */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/auth/{provider}/callback": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        /** Default Callback from provider auth */
        get: {
          parameters: {
            query?: never;
            header?: never;
            path: {
              /** @description Provider name */
              provider: string;
            };
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Returns a jwt token and user info */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/auth/forgot-password": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send rest password email */
        post: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody: {
            content: {
              /** @example {
               *       "email": "foo.bar@strapi.io"
               *     } */
              "application/json": {
                email?: string;
              };
            };
          };
          responses: {
            /** @description Returns ok */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": {
                  /** @enum {string} */
                  ok?: true;
                };
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/auth/reset-password": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rest user password */
        post: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody: {
            content: {
              /** @example {
               *       "password": "Test1234",
               *       "passwordConfirmation": "Test1234",
               *       "code": "zertyoaizndoianzodianzdonaizdoinaozdnia"
               *     } */
              "application/json": {
                password?: string;
                passwordConfirmation?: string;
                code?: string;
              };
            };
          };
          responses: {
            /** @description Returns a jwt token and user info */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/auth/change-password": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update user's own password */
        post: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody: {
            content: {
              "application/json": {
                password: string;
                currentPassword: string;
                passwordConfirmation: string;
              };
            };
          };
          responses: {
            /** @description Returns a jwt token and user info */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/auth/email-confirmation": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        /** Confirm user email */
        get: {
          parameters: {
            query?: {
              /** @description confirmation token received by email */
              confirmation?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Redirects to the configure email confirmation redirect url */
            301: {
              headers: {
                [name: string]: unknown;
              };
              content?: never;
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/auth/send-email-confirmation": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send confirmation email */
        post: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody: {
            content: {
              "application/json": {
                email?: string;
              };
            };
          };
          responses: {
            /** @description Returns email and boolean to confirm email was sent */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": {
                  email?: string;
                  /** @enum {string} */
                  sent?: true;
                };
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/users-permissions/permissions": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        /** Get default generated permissions */
        get: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Returns the permissions tree */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": {
                  permissions?: components["schemas"]["Users-Permissions-PermissionsTree"];
                };
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/users-permissions/roles": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        /** List roles */
        get: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Returns list of roles */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": {
                  roles?: (components["schemas"]["Users-Permissions-Role"] & {
                    nb_users?: number;
                  })[];
                };
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        put?: never;
        /** Create a role */
        post: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody: components["requestBodies"]["Users-Permissions-RoleRequest"];
          responses: {
            /** @description Returns ok if the role was create */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": {
                  /** @enum {string} */
                  ok?: true;
                };
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/users-permissions/roles/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        /** Get a role */
        get: {
          parameters: {
            query?: never;
            header?: never;
            path: {
              /** @description role Id */
              id: string;
            };
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Returns the role */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": {
                  role?: components["schemas"]["Users-Permissions-Role"];
                };
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/users-permissions/roles/{role}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        get?: never;
        /** Update a role */
        put: {
          parameters: {
            query?: never;
            header?: never;
            path: {
              /** @description role Id */
              role: string;
            };
            cookie?: never;
          };
          requestBody: components["requestBodies"]["Users-Permissions-RoleRequest"];
          responses: {
            /** @description Returns ok if the role was udpated */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": {
                  /** @enum {string} */
                  ok?: true;
                };
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        post?: never;
        /** Delete a role */
        delete: {
          parameters: {
            query?: never;
            header?: never;
            path: {
              /** @description role Id */
              role: string;
            };
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Returns ok if the role was delete */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": {
                  /** @enum {string} */
                  ok?: true;
                };
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/users": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        /** Get list of users */
        get: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Returns an array of users */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Users-Permissions-User"][];
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        put?: never;
        /** Create a user */
        post: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody: {
            content: {
              /** @example {
               *       "username": "foo",
               *       "email": "foo@strapi.io",
               *       "password": "foo-password"
               *     } */
              "application/json": {
                email: string;
                username: string;
                password: string;
              };
            };
          };
          responses: {
            /** @description Returns created user info */
            201: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Users-Permissions-User"] & {
                  role?: components["schemas"]["Users-Permissions-Role"];
                };
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/users/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        /** Get a user */
        get: {
          parameters: {
            query?: never;
            header?: never;
            path: {
              /** @description user Id */
              id: string;
            };
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Returns a user */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Users-Permissions-User"];
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        /** Update a user */
        put: {
          parameters: {
            query?: never;
            header?: never;
            path: {
              /** @description user Id */
              id: string;
            };
            cookie?: never;
          };
          requestBody: {
            content: {
              /** @example {
               *       "username": "foo",
               *       "email": "foo@strapi.io",
               *       "password": "foo-password"
               *     } */
              "application/json": {
                email: string;
                username: string;
                password: string;
              };
            };
          };
          responses: {
            /** @description Returns updated user info */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Users-Permissions-User"] & {
                  role?: components["schemas"]["Users-Permissions-Role"];
                };
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        post?: never;
        /** Delete a user */
        delete: {
          parameters: {
            query?: never;
            header?: never;
            path: {
              /** @description user Id */
              id: string;
            };
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Returns deleted user info */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Users-Permissions-User"];
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/users/me": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        /** Get authenticated user info */
        get: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Returns user info */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Users-Permissions-User"];
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
      "/users/count": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        /** Get user count */
        get: {
          parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
          };
          requestBody?: never;
          responses: {
            /** @description Returns a number */
            200: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": number;
              };
            };
            /** @description Error */
            default: {
              headers: {
                [name: string]: unknown;
              };
              content: {
                "application/json": components["schemas"]["Error"];
              };
            };
          };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
      };
    }
    type webhooks = Record<string, never>;
    interface components {
      schemas: {
        Error: {
          data?: (Record<string, never> | Record<string, never>[]) | null;
          error: {
            status?: number;
            name?: string;
            message?: string;
            details?: Record<string, never>;
          };
        };
        ArticleRequest: {
          data: {
            derived_data?: unknown;
            title?: string;
            body?: string;
            /** @example string or id */
            image: number | string;
            slug: string;
            description: string;
            externalLink?: string;
            plainTitle?: string;
            /** @example 123456789 */
            readTimeEstimateMinutes?: string;
            seo?: components["schemas"]["SharedSeoComponent"];
            testx?: string;
            testa?: string;
          };
        };
        ArticleListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["Article"];
        };
        ArticleListResponse: {
          data?: components["schemas"]["ArticleListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        Article: {
          derived_data?: unknown;
          title?: string;
          body?: string;
          image: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      pathId?: number;
                      parent?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      children?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      files?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  firstname?: string;
                                  lastname?: string;
                                  username?: string;
                                  /** Format: email */
                                  email?: string;
                                  resetPasswordToken?: string;
                                  registrationToken?: string;
                                  isActive?: boolean;
                                  roles?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                        };
                                        permissions?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              action?: string;
                                              actionParameters?: unknown;
                                              subject?: string;
                                              properties?: unknown;
                                              conditions?: unknown;
                                              role?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                            };
                                          }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                  };
                                  blocked?: boolean;
                                  preferedLanguage?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        }[];
                      };
                      path?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                placeholder?: string;
              };
            };
          };
          slug: string;
          description: string;
          externalLink?: string;
          plainTitle?: string;
          /** @example 123456789 */
          readTimeEstimateMinutes?: string;
          seo?: components["schemas"]["SharedSeoComponent"];
          testx?: string;
          testa?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        ArticleResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["Article"];
        };
        ArticleResponse: {
          data?: components["schemas"]["ArticleResponseDataObject"];
          meta?: Record<string, never>;
        };
        SharedSeoComponent: {
          id?: number;
          metaTitle?: string;
          metaDescription?: string;
          metaImage?: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                placeholder?: string;
              };
            };
          };
          metaSocial?: {
            id?: number;
            /** @enum {string} */
            socialNetwork?: "Facebook" | "Discord" | "Twitter";
            title?: string;
            description?: string;
            image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  placeholder?: string;
                };
              };
            };
          }[];
          keywords?: string;
          metaRobots?: string;
          structuredData?: unknown;
          metaViewport?: string;
          canonicalURL?: string;
        };
        ArticlesPageRequest: {
          data: {
            /** @example string or id */
            featuredArticle?: number | string;
          };
        };
        ArticlesPageListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["ArticlesPage"];
        };
        ArticlesPageListResponse: {
          data?: components["schemas"]["ArticlesPageListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        ArticlesPage: {
          featuredArticle?: {
            data?: {
              id?: number;
              attributes?: {
                derived_data?: unknown;
                title?: string;
                body?: string;
                image?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      alternativeText?: string;
                      caption?: string;
                      width?: number;
                      height?: number;
                      formats?: unknown;
                      hash?: string;
                      ext?: string;
                      mime?: string;
                      /** Format: float */
                      size?: number;
                      url?: string;
                      previewUrl?: string;
                      provider?: string;
                      provider_metadata?: unknown;
                      related?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      folder?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            pathId?: number;
                            parent?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            children?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            files?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  alternativeText?: string;
                                  caption?: string;
                                  width?: number;
                                  height?: number;
                                  formats?: unknown;
                                  hash?: string;
                                  ext?: string;
                                  mime?: string;
                                  /** Format: float */
                                  size?: number;
                                  url?: string;
                                  previewUrl?: string;
                                  provider?: string;
                                  provider_metadata?: unknown;
                                  related?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                  };
                                  folder?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  folderPath?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        firstname?: string;
                                        lastname?: string;
                                        username?: string;
                                        /** Format: email */
                                        email?: string;
                                        resetPasswordToken?: string;
                                        registrationToken?: string;
                                        isActive?: boolean;
                                        roles?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              code?: string;
                                              description?: string;
                                              users?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                }[];
                                              };
                                              permissions?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: {
                                                    action?: string;
                                                    actionParameters?: unknown;
                                                    subject?: string;
                                                    properties?: unknown;
                                                    conditions?: unknown;
                                                    role?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<
                                                          string,
                                                          never
                                                        >;
                                                      };
                                                    };
                                                    /** Format: date-time */
                                                    createdAt?: string;
                                                    /** Format: date-time */
                                                    updatedAt?: string;
                                                    createdBy?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<
                                                          string,
                                                          never
                                                        >;
                                                      };
                                                    };
                                                    updatedBy?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<
                                                          string,
                                                          never
                                                        >;
                                                      };
                                                    };
                                                  };
                                                }[];
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                            };
                                          }[];
                                        };
                                        blocked?: boolean;
                                        preferedLanguage?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  placeholder?: string;
                                };
                              }[];
                            };
                            path?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        };
                      };
                      folderPath?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      placeholder?: string;
                    };
                  };
                };
                slug?: string;
                description?: string;
                externalLink?: string;
                plainTitle?: string;
                /** @example 123456789 */
                readTimeEstimateMinutes?: string;
                seo?: {
                  id?: number;
                  metaTitle?: string;
                  metaDescription?: string;
                  metaImage?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        placeholder?: string;
                      };
                    };
                  };
                  metaSocial?: {
                    id?: number;
                    /** @enum {string} */
                    socialNetwork?: "Facebook" | "Discord" | "Twitter";
                    title?: string;
                    description?: string;
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          placeholder?: string;
                        };
                      };
                    };
                  }[];
                  keywords?: string;
                  metaRobots?: string;
                  structuredData?: unknown;
                  metaViewport?: string;
                  canonicalURL?: string;
                };
                testx?: string;
                testa?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            };
          };
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        ArticlesPageResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["ArticlesPage"];
        };
        ArticlesPageResponse: {
          data?: components["schemas"]["ArticlesPageResponseDataObject"];
          meta?: Record<string, never>;
        };
        EventRequest: {
          data: {
            title: string;
            description: string;
            invitationToSponsor: boolean;
            funders?: (number | string)[];
            body?: string;
            specialNotices?: unknown;
            slug: string;
            venues: components["schemas"]["EventsVenueComponent"][];
            /** @example string or id */
            coverImage: number | string;
            /** Format: date-time */
            earliestVenueStart?: string;
            /** Format: date-time */
            latestVenueEnd?: string;
            /** @enum {string} */
            status?: "UPCOMING" | "CURRENT" | "EXPIRED";
            /** @example string or id */
            linkedGallery?: number | string;
            plainTitle?: string;
            seo?: components["schemas"]["SharedSeoComponent"];
          };
        };
        EventListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["Event"];
        };
        EventListResponse: {
          data?: components["schemas"]["EventListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        Event: {
          title: string;
          description: string;
          invitationToSponsor: boolean;
          funders?: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                link?: string;
                logo?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      alternativeText?: string;
                      caption?: string;
                      width?: number;
                      height?: number;
                      formats?: unknown;
                      hash?: string;
                      ext?: string;
                      mime?: string;
                      /** Format: float */
                      size?: number;
                      url?: string;
                      previewUrl?: string;
                      provider?: string;
                      provider_metadata?: unknown;
                      related?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      folder?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            pathId?: number;
                            parent?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            children?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            files?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  alternativeText?: string;
                                  caption?: string;
                                  width?: number;
                                  height?: number;
                                  formats?: unknown;
                                  hash?: string;
                                  ext?: string;
                                  mime?: string;
                                  /** Format: float */
                                  size?: number;
                                  url?: string;
                                  previewUrl?: string;
                                  provider?: string;
                                  provider_metadata?: unknown;
                                  related?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                  };
                                  folder?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  folderPath?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        firstname?: string;
                                        lastname?: string;
                                        username?: string;
                                        /** Format: email */
                                        email?: string;
                                        resetPasswordToken?: string;
                                        registrationToken?: string;
                                        isActive?: boolean;
                                        roles?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              code?: string;
                                              description?: string;
                                              users?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                }[];
                                              };
                                              permissions?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: {
                                                    action?: string;
                                                    actionParameters?: unknown;
                                                    subject?: string;
                                                    properties?: unknown;
                                                    conditions?: unknown;
                                                    role?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<
                                                          string,
                                                          never
                                                        >;
                                                      };
                                                    };
                                                    /** Format: date-time */
                                                    createdAt?: string;
                                                    /** Format: date-time */
                                                    updatedAt?: string;
                                                    createdBy?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<
                                                          string,
                                                          never
                                                        >;
                                                      };
                                                    };
                                                    updatedBy?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<
                                                          string,
                                                          never
                                                        >;
                                                      };
                                                    };
                                                  };
                                                }[];
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                            };
                                          }[];
                                        };
                                        blocked?: boolean;
                                        preferedLanguage?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  placeholder?: string;
                                };
                              }[];
                            };
                            path?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        };
                      };
                      folderPath?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      placeholder?: string;
                    };
                  };
                };
                sponsored_events?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      title?: string;
                      description?: string;
                      invitationToSponsor?: boolean;
                      funders?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      body?: string;
                      specialNotices?: unknown;
                      slug?: string;
                      venues?: {
                        id?: number;
                        /** Format: float */
                        price?: number;
                        title?: string;
                        description?: string;
                        buttons?: {
                          id?: number;
                          text?: string;
                          link?: string;
                          icon?: string;
                        }[];
                        /** Format: date-time */
                        startDateTime?: string;
                        /** Format: date-time */
                        endDateTime?: string;
                        coverImage?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              placeholder?: string;
                            };
                          };
                        };
                      }[];
                      coverImage?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        };
                      };
                      /** Format: date-time */
                      earliestVenueStart?: string;
                      /** Format: date-time */
                      latestVenueEnd?: string;
                      /** @enum {string} */
                      status?: "UPCOMING" | "CURRENT" | "EXPIRED";
                      linkedGallery?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            title?: string;
                            galleryImages?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  alternativeText?: string;
                                  caption?: string;
                                  width?: number;
                                  height?: number;
                                  formats?: unknown;
                                  hash?: string;
                                  ext?: string;
                                  mime?: string;
                                  /** Format: float */
                                  size?: number;
                                  url?: string;
                                  previewUrl?: string;
                                  provider?: string;
                                  provider_metadata?: unknown;
                                  related?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                  };
                                  folder?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  folderPath?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  placeholder?: string;
                                };
                              }[];
                            };
                            slug?: string;
                            coverImage?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  alternativeText?: string;
                                  caption?: string;
                                  width?: number;
                                  height?: number;
                                  formats?: unknown;
                                  hash?: string;
                                  ext?: string;
                                  mime?: string;
                                  /** Format: float */
                                  size?: number;
                                  url?: string;
                                  previewUrl?: string;
                                  provider?: string;
                                  provider_metadata?: unknown;
                                  related?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                  };
                                  folder?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  folderPath?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  placeholder?: string;
                                };
                              };
                            };
                            /** Format: date */
                            publicationDate?: string;
                            linkedEvent?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            plainTitle?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        };
                      };
                      plainTitle?: string;
                      seo?: {
                        id?: number;
                        metaTitle?: string;
                        metaDescription?: string;
                        metaImage?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              placeholder?: string;
                            };
                          };
                        };
                        metaSocial?: {
                          id?: number;
                          /** @enum {string} */
                          socialNetwork?: "Facebook" | "Discord" | "Twitter";
                          title?: string;
                          description?: string;
                          image?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                placeholder?: string;
                              };
                            };
                          };
                        }[];
                        keywords?: string;
                        metaRobots?: string;
                        structuredData?: unknown;
                        metaViewport?: string;
                        canonicalURL?: string;
                      };
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      /** Format: date-time */
                      publishedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  }[];
                };
                backgroundColor?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            }[];
          };
          body?: string;
          specialNotices?: unknown;
          slug: string;
          venues: components["schemas"]["EventsVenueComponent"][];
          coverImage: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                placeholder?: string;
              };
            };
          };
          /** Format: date-time */
          earliestVenueStart?: string;
          /** Format: date-time */
          latestVenueEnd?: string;
          /** @enum {string} */
          status?: "UPCOMING" | "CURRENT" | "EXPIRED";
          linkedGallery?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
          plainTitle?: string;
          seo?: components["schemas"]["SharedSeoComponent"];
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        EventResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["Event"];
        };
        EventResponse: {
          data?: components["schemas"]["EventResponseDataObject"];
          meta?: Record<string, never>;
        };
        EventsVenueComponent: {
          id?: number;
          /** Format: float */
          price?: number;
          title?: string;
          description?: string;
          buttons?: {
            id?: number;
            text?: string;
            link?: string;
            icon?: string;
          }[];
          /** Format: date-time */
          startDateTime?: string;
          /** Format: date-time */
          endDateTime?: string;
          coverImage?: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                placeholder?: string;
              };
            };
          };
        };
        FunderRequest: {
          data: {
            name: string;
            link?: string;
            /** @example string or id */
            logo: number | string;
            sponsored_events?: (number | string)[];
            backgroundColor?: string;
          };
        };
        FunderListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["Funder"];
        };
        FunderListResponse: {
          data?: components["schemas"]["FunderListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        Funder: {
          name: string;
          link?: string;
          logo: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      pathId?: number;
                      parent?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      children?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      files?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  firstname?: string;
                                  lastname?: string;
                                  username?: string;
                                  /** Format: email */
                                  email?: string;
                                  resetPasswordToken?: string;
                                  registrationToken?: string;
                                  isActive?: boolean;
                                  roles?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                        };
                                        permissions?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              action?: string;
                                              actionParameters?: unknown;
                                              subject?: string;
                                              properties?: unknown;
                                              conditions?: unknown;
                                              role?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                            };
                                          }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                  };
                                  blocked?: boolean;
                                  preferedLanguage?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        }[];
                      };
                      path?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                placeholder?: string;
              };
            };
          };
          sponsored_events?: {
            data?: {
              id?: number;
              attributes?: {
                title?: string;
                description?: string;
                invitationToSponsor?: boolean;
                funders?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      link?: string;
                      logo?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        };
                      };
                      sponsored_events?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      backgroundColor?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      /** Format: date-time */
                      publishedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  }[];
                };
                body?: string;
                specialNotices?: unknown;
                slug?: string;
                venues?: {
                  id?: number;
                  /** Format: float */
                  price?: number;
                  title?: string;
                  description?: string;
                  buttons?: {
                    id?: number;
                    text?: string;
                    link?: string;
                    icon?: string;
                  }[];
                  /** Format: date-time */
                  startDateTime?: string;
                  /** Format: date-time */
                  endDateTime?: string;
                  coverImage?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        placeholder?: string;
                      };
                    };
                  };
                }[];
                coverImage?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      alternativeText?: string;
                      caption?: string;
                      width?: number;
                      height?: number;
                      formats?: unknown;
                      hash?: string;
                      ext?: string;
                      mime?: string;
                      /** Format: float */
                      size?: number;
                      url?: string;
                      previewUrl?: string;
                      provider?: string;
                      provider_metadata?: unknown;
                      related?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      folder?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      folderPath?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      placeholder?: string;
                    };
                  };
                };
                /** Format: date-time */
                earliestVenueStart?: string;
                /** Format: date-time */
                latestVenueEnd?: string;
                /** @enum {string} */
                status?: "UPCOMING" | "CURRENT" | "EXPIRED";
                linkedGallery?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      title?: string;
                      galleryImages?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        }[];
                      };
                      slug?: string;
                      coverImage?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        };
                      };
                      /** Format: date */
                      publicationDate?: string;
                      linkedEvent?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      plainTitle?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      /** Format: date-time */
                      publishedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  };
                };
                plainTitle?: string;
                seo?: {
                  id?: number;
                  metaTitle?: string;
                  metaDescription?: string;
                  metaImage?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        placeholder?: string;
                      };
                    };
                  };
                  metaSocial?: {
                    id?: number;
                    /** @enum {string} */
                    socialNetwork?: "Facebook" | "Discord" | "Twitter";
                    title?: string;
                    description?: string;
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          placeholder?: string;
                        };
                      };
                    };
                  }[];
                  keywords?: string;
                  metaRobots?: string;
                  structuredData?: unknown;
                  metaViewport?: string;
                  canonicalURL?: string;
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            }[];
          };
          backgroundColor?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        FunderResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["Funder"];
        };
        FunderResponse: {
          data?: components["schemas"]["FunderResponseDataObject"];
          meta?: Record<string, never>;
        };
        GalleryRequest: {
          data: {
            title: string;
            galleryImages: (number | string)[];
            slug: string;
            /** @example string or id */
            coverImage?: number | string;
            /** Format: date */
            publicationDate: string;
            /** @example string or id */
            linkedEvent?: number | string;
            plainTitle?: string;
          };
        };
        GalleryListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["Gallery"];
        };
        GalleryListResponse: {
          data?: components["schemas"]["GalleryListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        Gallery: {
          title: string;
          galleryImages: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      pathId?: number;
                      parent?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      children?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      files?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  firstname?: string;
                                  lastname?: string;
                                  username?: string;
                                  /** Format: email */
                                  email?: string;
                                  resetPasswordToken?: string;
                                  registrationToken?: string;
                                  isActive?: boolean;
                                  roles?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                        };
                                        permissions?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              action?: string;
                                              actionParameters?: unknown;
                                              subject?: string;
                                              properties?: unknown;
                                              conditions?: unknown;
                                              role?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                            };
                                          }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                  };
                                  blocked?: boolean;
                                  preferedLanguage?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        }[];
                      };
                      path?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                placeholder?: string;
              };
            }[];
          };
          slug: string;
          coverImage?: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                placeholder?: string;
              };
            };
          };
          /** Format: date */
          publicationDate: string;
          linkedEvent?: {
            data?: {
              id?: number;
              attributes?: {
                title?: string;
                description?: string;
                invitationToSponsor?: boolean;
                funders?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      link?: string;
                      logo?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        };
                      };
                      sponsored_events?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      backgroundColor?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      /** Format: date-time */
                      publishedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  }[];
                };
                body?: string;
                specialNotices?: unknown;
                slug?: string;
                venues?: {
                  id?: number;
                  /** Format: float */
                  price?: number;
                  title?: string;
                  description?: string;
                  buttons?: {
                    id?: number;
                    text?: string;
                    link?: string;
                    icon?: string;
                  }[];
                  /** Format: date-time */
                  startDateTime?: string;
                  /** Format: date-time */
                  endDateTime?: string;
                  coverImage?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        placeholder?: string;
                      };
                    };
                  };
                }[];
                coverImage?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      alternativeText?: string;
                      caption?: string;
                      width?: number;
                      height?: number;
                      formats?: unknown;
                      hash?: string;
                      ext?: string;
                      mime?: string;
                      /** Format: float */
                      size?: number;
                      url?: string;
                      previewUrl?: string;
                      provider?: string;
                      provider_metadata?: unknown;
                      related?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      folder?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      folderPath?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      placeholder?: string;
                    };
                  };
                };
                /** Format: date-time */
                earliestVenueStart?: string;
                /** Format: date-time */
                latestVenueEnd?: string;
                /** @enum {string} */
                status?: "UPCOMING" | "CURRENT" | "EXPIRED";
                linkedGallery?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      title?: string;
                      galleryImages?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        }[];
                      };
                      slug?: string;
                      coverImage?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        };
                      };
                      /** Format: date */
                      publicationDate?: string;
                      linkedEvent?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      plainTitle?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      /** Format: date-time */
                      publishedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  };
                };
                plainTitle?: string;
                seo?: {
                  id?: number;
                  metaTitle?: string;
                  metaDescription?: string;
                  metaImage?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        placeholder?: string;
                      };
                    };
                  };
                  metaSocial?: {
                    id?: number;
                    /** @enum {string} */
                    socialNetwork?: "Facebook" | "Discord" | "Twitter";
                    title?: string;
                    description?: string;
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          placeholder?: string;
                        };
                      };
                    };
                  }[];
                  keywords?: string;
                  metaRobots?: string;
                  structuredData?: unknown;
                  metaViewport?: string;
                  canonicalURL?: string;
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            };
          };
          plainTitle?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        GalleryResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["Gallery"];
        };
        GalleryResponse: {
          data?: components["schemas"]["GalleryResponseDataObject"];
          meta?: Record<string, never>;
        };
        HomePageRequest: {
          data: {
            eventPosters?: (number | string)[];
            featuredStats: components["schemas"]["HomepageStatisticComponent"][];
            /** @example string or id */
            featuredArticle?: number | string;
            /** @example string or id */
            featuredEvent?: number | string;
            /** @example string or id */
            featuredGallery?: number | string;
            featuredFunders?: (number | string)[];
          };
        };
        HomePageListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["HomePage"];
        };
        HomePageListResponse: {
          data?: components["schemas"]["HomePageListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        HomePage: {
          eventPosters?: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      pathId?: number;
                      parent?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      children?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      files?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  firstname?: string;
                                  lastname?: string;
                                  username?: string;
                                  /** Format: email */
                                  email?: string;
                                  resetPasswordToken?: string;
                                  registrationToken?: string;
                                  isActive?: boolean;
                                  roles?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                        };
                                        permissions?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              action?: string;
                                              actionParameters?: unknown;
                                              subject?: string;
                                              properties?: unknown;
                                              conditions?: unknown;
                                              role?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                            };
                                          }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                  };
                                  blocked?: boolean;
                                  preferedLanguage?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        }[];
                      };
                      path?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                placeholder?: string;
              };
            }[];
          };
          featuredStats: components["schemas"]["HomepageStatisticComponent"][];
          featuredArticle?: {
            data?: {
              id?: number;
              attributes?: {
                derived_data?: unknown;
                title?: string;
                body?: string;
                image?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      alternativeText?: string;
                      caption?: string;
                      width?: number;
                      height?: number;
                      formats?: unknown;
                      hash?: string;
                      ext?: string;
                      mime?: string;
                      /** Format: float */
                      size?: number;
                      url?: string;
                      previewUrl?: string;
                      provider?: string;
                      provider_metadata?: unknown;
                      related?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      folder?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      folderPath?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      placeholder?: string;
                    };
                  };
                };
                slug?: string;
                description?: string;
                externalLink?: string;
                plainTitle?: string;
                /** @example 123456789 */
                readTimeEstimateMinutes?: string;
                seo?: {
                  id?: number;
                  metaTitle?: string;
                  metaDescription?: string;
                  metaImage?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        placeholder?: string;
                      };
                    };
                  };
                  metaSocial?: {
                    id?: number;
                    /** @enum {string} */
                    socialNetwork?: "Facebook" | "Discord" | "Twitter";
                    title?: string;
                    description?: string;
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          placeholder?: string;
                        };
                      };
                    };
                  }[];
                  keywords?: string;
                  metaRobots?: string;
                  structuredData?: unknown;
                  metaViewport?: string;
                  canonicalURL?: string;
                };
                testx?: string;
                testa?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            };
          };
          featuredEvent?: {
            data?: {
              id?: number;
              attributes?: {
                title?: string;
                description?: string;
                invitationToSponsor?: boolean;
                funders?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      link?: string;
                      logo?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        };
                      };
                      sponsored_events?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      backgroundColor?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      /** Format: date-time */
                      publishedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  }[];
                };
                body?: string;
                specialNotices?: unknown;
                slug?: string;
                venues?: {
                  id?: number;
                  /** Format: float */
                  price?: number;
                  title?: string;
                  description?: string;
                  buttons?: {
                    id?: number;
                    text?: string;
                    link?: string;
                    icon?: string;
                  }[];
                  /** Format: date-time */
                  startDateTime?: string;
                  /** Format: date-time */
                  endDateTime?: string;
                  coverImage?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        placeholder?: string;
                      };
                    };
                  };
                }[];
                coverImage?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      alternativeText?: string;
                      caption?: string;
                      width?: number;
                      height?: number;
                      formats?: unknown;
                      hash?: string;
                      ext?: string;
                      mime?: string;
                      /** Format: float */
                      size?: number;
                      url?: string;
                      previewUrl?: string;
                      provider?: string;
                      provider_metadata?: unknown;
                      related?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      folder?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      folderPath?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      placeholder?: string;
                    };
                  };
                };
                /** Format: date-time */
                earliestVenueStart?: string;
                /** Format: date-time */
                latestVenueEnd?: string;
                /** @enum {string} */
                status?: "UPCOMING" | "CURRENT" | "EXPIRED";
                linkedGallery?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      title?: string;
                      galleryImages?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        }[];
                      };
                      slug?: string;
                      coverImage?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        };
                      };
                      /** Format: date */
                      publicationDate?: string;
                      linkedEvent?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      plainTitle?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      /** Format: date-time */
                      publishedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  };
                };
                plainTitle?: string;
                seo?: {
                  id?: number;
                  metaTitle?: string;
                  metaDescription?: string;
                  metaImage?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        placeholder?: string;
                      };
                    };
                  };
                  metaSocial?: {
                    id?: number;
                    /** @enum {string} */
                    socialNetwork?: "Facebook" | "Discord" | "Twitter";
                    title?: string;
                    description?: string;
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          placeholder?: string;
                        };
                      };
                    };
                  }[];
                  keywords?: string;
                  metaRobots?: string;
                  structuredData?: unknown;
                  metaViewport?: string;
                  canonicalURL?: string;
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            };
          };
          featuredGallery?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
          featuredFunders?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            }[];
          };
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        HomePageResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["HomePage"];
        };
        HomePageResponse: {
          data?: components["schemas"]["HomePageResponseDataObject"];
          meta?: Record<string, never>;
        };
        HomepageStatisticComponent: {
          id?: number;
          value?: string;
          label?: string;
        };
        LlmSnippetRequest: {
          data: {
            data?: string;
            contentType?: string;
            field?: string;
            entryId?: number;
          };
        };
        LlmSnippetListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["LlmSnippet"];
        };
        LlmSnippetListResponse: {
          data?: components["schemas"]["LlmSnippetListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        LlmSnippet: {
          data?: string;
          contentType?: string;
          field?: string;
          entryId?: number;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: {
                firstname?: string;
                lastname?: string;
                username?: string;
                /** Format: email */
                email?: string;
                resetPasswordToken?: string;
                registrationToken?: string;
                isActive?: boolean;
                roles?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      code?: string;
                      description?: string;
                      users?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      permissions?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            action?: string;
                            actionParameters?: unknown;
                            subject?: string;
                            properties?: unknown;
                            conditions?: unknown;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                      };
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  }[];
                };
                blocked?: boolean;
                preferedLanguage?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        LlmSnippetResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["LlmSnippet"];
        };
        LlmSnippetResponse: {
          data?: components["schemas"]["LlmSnippetResponseDataObject"];
          meta?: Record<string, never>;
        };
        MediaPageRequest: {
          data: {
            galleries?: (number | string)[];
          };
        };
        MediaPageListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["MediaPage"];
        };
        MediaPageListResponse: {
          data?: components["schemas"]["MediaPageListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        MediaPage: {
          galleries?: {
            data?: {
              id?: number;
              attributes?: {
                title?: string;
                galleryImages?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      alternativeText?: string;
                      caption?: string;
                      width?: number;
                      height?: number;
                      formats?: unknown;
                      hash?: string;
                      ext?: string;
                      mime?: string;
                      /** Format: float */
                      size?: number;
                      url?: string;
                      previewUrl?: string;
                      provider?: string;
                      provider_metadata?: unknown;
                      related?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      folder?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            pathId?: number;
                            parent?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            children?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            files?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  alternativeText?: string;
                                  caption?: string;
                                  width?: number;
                                  height?: number;
                                  formats?: unknown;
                                  hash?: string;
                                  ext?: string;
                                  mime?: string;
                                  /** Format: float */
                                  size?: number;
                                  url?: string;
                                  previewUrl?: string;
                                  provider?: string;
                                  provider_metadata?: unknown;
                                  related?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                  };
                                  folder?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  folderPath?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        firstname?: string;
                                        lastname?: string;
                                        username?: string;
                                        /** Format: email */
                                        email?: string;
                                        resetPasswordToken?: string;
                                        registrationToken?: string;
                                        isActive?: boolean;
                                        roles?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              code?: string;
                                              description?: string;
                                              users?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                }[];
                                              };
                                              permissions?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: {
                                                    action?: string;
                                                    actionParameters?: unknown;
                                                    subject?: string;
                                                    properties?: unknown;
                                                    conditions?: unknown;
                                                    role?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<
                                                          string,
                                                          never
                                                        >;
                                                      };
                                                    };
                                                    /** Format: date-time */
                                                    createdAt?: string;
                                                    /** Format: date-time */
                                                    updatedAt?: string;
                                                    createdBy?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<
                                                          string,
                                                          never
                                                        >;
                                                      };
                                                    };
                                                    updatedBy?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<
                                                          string,
                                                          never
                                                        >;
                                                      };
                                                    };
                                                  };
                                                }[];
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                            };
                                          }[];
                                        };
                                        blocked?: boolean;
                                        preferedLanguage?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  placeholder?: string;
                                };
                              }[];
                            };
                            path?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        };
                      };
                      folderPath?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      placeholder?: string;
                    };
                  }[];
                };
                slug?: string;
                coverImage?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      alternativeText?: string;
                      caption?: string;
                      width?: number;
                      height?: number;
                      formats?: unknown;
                      hash?: string;
                      ext?: string;
                      mime?: string;
                      /** Format: float */
                      size?: number;
                      url?: string;
                      previewUrl?: string;
                      provider?: string;
                      provider_metadata?: unknown;
                      related?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      folder?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      folderPath?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      placeholder?: string;
                    };
                  };
                };
                /** Format: date */
                publicationDate?: string;
                linkedEvent?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      title?: string;
                      description?: string;
                      invitationToSponsor?: boolean;
                      funders?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            link?: string;
                            logo?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  alternativeText?: string;
                                  caption?: string;
                                  width?: number;
                                  height?: number;
                                  formats?: unknown;
                                  hash?: string;
                                  ext?: string;
                                  mime?: string;
                                  /** Format: float */
                                  size?: number;
                                  url?: string;
                                  previewUrl?: string;
                                  provider?: string;
                                  provider_metadata?: unknown;
                                  related?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                  };
                                  folder?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  folderPath?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  placeholder?: string;
                                };
                              };
                            };
                            sponsored_events?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            backgroundColor?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                      };
                      body?: string;
                      specialNotices?: unknown;
                      slug?: string;
                      venues?: {
                        id?: number;
                        /** Format: float */
                        price?: number;
                        title?: string;
                        description?: string;
                        buttons?: {
                          id?: number;
                          text?: string;
                          link?: string;
                          icon?: string;
                        }[];
                        /** Format: date-time */
                        startDateTime?: string;
                        /** Format: date-time */
                        endDateTime?: string;
                        coverImage?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              placeholder?: string;
                            };
                          };
                        };
                      }[];
                      coverImage?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        };
                      };
                      /** Format: date-time */
                      earliestVenueStart?: string;
                      /** Format: date-time */
                      latestVenueEnd?: string;
                      /** @enum {string} */
                      status?: "UPCOMING" | "CURRENT" | "EXPIRED";
                      linkedGallery?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      plainTitle?: string;
                      seo?: {
                        id?: number;
                        metaTitle?: string;
                        metaDescription?: string;
                        metaImage?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              placeholder?: string;
                            };
                          };
                        };
                        metaSocial?: {
                          id?: number;
                          /** @enum {string} */
                          socialNetwork?: "Facebook" | "Discord" | "Twitter";
                          title?: string;
                          description?: string;
                          image?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                placeholder?: string;
                              };
                            };
                          };
                        }[];
                        keywords?: string;
                        metaRobots?: string;
                        structuredData?: unknown;
                        metaViewport?: string;
                        canonicalURL?: string;
                      };
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      /** Format: date-time */
                      publishedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  };
                };
                plainTitle?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                /** Format: date-time */
                publishedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            }[];
          };
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        MediaPageResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["MediaPage"];
        };
        MediaPageResponse: {
          data?: components["schemas"]["MediaPageResponseDataObject"];
          meta?: Record<string, never>;
        };
        MemberRequest: {
          data: {
            firstName: string;
            lastName: string;
            /** @example string or id */
            users_permissions_user?: number | string;
            occupation: string;
            biography?: string;
            titleOrEducation?: string;
            /** @example string or id */
            heroImage: number | string;
            /** @example string or id */
            profileImage?: number | string;
            specialTags?: unknown;
            fullName?: string;
          };
        };
        MemberListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["Member"];
        };
        MemberListResponse: {
          data?: components["schemas"]["MemberListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        Member: {
          firstName: string;
          lastName: string;
          users_permissions_user?: {
            data?: {
              id?: number;
              attributes?: {
                username?: string;
                /** Format: email */
                email?: string;
                provider?: string;
                resetPasswordToken?: string;
                confirmationToken?: string;
                confirmed?: boolean;
                blocked?: boolean;
                role?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      description?: string;
                      type?: string;
                      permissions?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            action?: string;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  firstname?: string;
                                  lastname?: string;
                                  username?: string;
                                  /** Format: email */
                                  email?: string;
                                  resetPasswordToken?: string;
                                  registrationToken?: string;
                                  isActive?: boolean;
                                  roles?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                        };
                                        permissions?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              action?: string;
                                              actionParameters?: unknown;
                                              subject?: string;
                                              properties?: unknown;
                                              conditions?: unknown;
                                              role?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                            };
                                          }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                  };
                                  blocked?: boolean;
                                  preferedLanguage?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                      };
                      users?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  };
                };
                member?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      firstName?: string;
                      lastName?: string;
                      users_permissions_user?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      occupation?: string;
                      biography?: string;
                      titleOrEducation?: string;
                      heroImage?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  pathId?: number;
                                  parent?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  children?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                  };
                                  files?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        placeholder?: string;
                                      };
                                    }[];
                                  };
                                  path?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        };
                      };
                      profileImage?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        };
                      };
                      specialTags?: unknown;
                      fullName?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      /** Format: date-time */
                      publishedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  };
                };
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            };
          };
          occupation: string;
          biography?: string;
          titleOrEducation?: string;
          heroImage: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                placeholder?: string;
              };
            };
          };
          profileImage?: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                placeholder?: string;
              };
            };
          };
          specialTags?: unknown;
          fullName?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        MemberResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["Member"];
        };
        MemberResponse: {
          data?: components["schemas"]["MemberResponseDataObject"];
          meta?: Record<string, never>;
        };
        MembershipPageRequest: {
          data: {
            membershipBenefits?: components["schemas"]["SinglePageComponentsMembershipBenefitComponent"][];
            frequentlyAskedQuestions?: components["schemas"]["SinglePageComponentsFrequentlyAskedQuestionComponent"][];
          };
        };
        MembershipPageListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["MembershipPage"];
        };
        MembershipPageListResponse: {
          data?: components["schemas"]["MembershipPageListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        MembershipPage: {
          membershipBenefits?: components["schemas"]["SinglePageComponentsMembershipBenefitComponent"][];
          frequentlyAskedQuestions?: components["schemas"]["SinglePageComponentsFrequentlyAskedQuestionComponent"][];
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: {
                firstname?: string;
                lastname?: string;
                username?: string;
                /** Format: email */
                email?: string;
                resetPasswordToken?: string;
                registrationToken?: string;
                isActive?: boolean;
                roles?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      code?: string;
                      description?: string;
                      users?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      permissions?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            action?: string;
                            actionParameters?: unknown;
                            subject?: string;
                            properties?: unknown;
                            conditions?: unknown;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                      };
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  }[];
                };
                blocked?: boolean;
                preferedLanguage?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        MembershipPageResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["MembershipPage"];
        };
        MembershipPageResponse: {
          data?: components["schemas"]["MembershipPageResponseDataObject"];
          meta?: Record<string, never>;
        };
        SinglePageComponentsMembershipBenefitComponent: {
          id?: number;
          title?: string;
          description?: string;
          link?: string;
          icon?: string;
        };
        SinglePageComponentsFrequentlyAskedQuestionComponent: {
          id?: number;
          question?: string;
          answer?: string;
        };
        PodcastEpisodeRequest: {
          data: {
            title: string;
            /** Format: date */
            publicationDate: string;
            episodeNumber?: number;
            /** @example string or id */
            coverImage: number | string;
            /** @example string or id */
            featuredImage: number | string;
            derived_data?: unknown;
            /** @example 123456789 */
            runTimeMs?: string;
            description: string;
            slug: string;
          };
        };
        PodcastEpisodeListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["PodcastEpisode"];
        };
        PodcastEpisodeListResponse: {
          data?: components["schemas"]["PodcastEpisodeListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        PodcastEpisode: {
          title: string;
          /** Format: date */
          publicationDate: string;
          episodeNumber?: number;
          coverImage: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      pathId?: number;
                      parent?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      children?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      files?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  firstname?: string;
                                  lastname?: string;
                                  username?: string;
                                  /** Format: email */
                                  email?: string;
                                  resetPasswordToken?: string;
                                  registrationToken?: string;
                                  isActive?: boolean;
                                  roles?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                        };
                                        permissions?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              action?: string;
                                              actionParameters?: unknown;
                                              subject?: string;
                                              properties?: unknown;
                                              conditions?: unknown;
                                              role?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<
                                                    string,
                                                    never
                                                  >;
                                                };
                                              };
                                            };
                                          }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                  };
                                  blocked?: boolean;
                                  preferedLanguage?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            placeholder?: string;
                          };
                        }[];
                      };
                      path?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                placeholder?: string;
              };
            };
          };
          featuredImage: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                placeholder?: string;
              };
            };
          };
          derived_data?: unknown;
          /** @example 123456789 */
          runTimeMs?: string;
          description: string;
          slug: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          /** Format: date-time */
          publishedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        PodcastEpisodeResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["PodcastEpisode"];
        };
        PodcastEpisodeResponse: {
          data?: components["schemas"]["PodcastEpisodeResponseDataObject"];
          meta?: Record<string, never>;
        };
        SiteConfigRequest: {
          data: {
            socialMedia?: components["schemas"]["MiscSocialMediaComponent"][];
            contactInfo?: components["schemas"]["SiteConfigContactInfoComponent"];
          };
        };
        SiteConfigListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["SiteConfig"];
        };
        SiteConfigListResponse: {
          data?: components["schemas"]["SiteConfigListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        SiteConfig: {
          socialMedia?: components["schemas"]["MiscSocialMediaComponent"][];
          contactInfo?: components["schemas"]["SiteConfigContactInfoComponent"];
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: {
                firstname?: string;
                lastname?: string;
                username?: string;
                /** Format: email */
                email?: string;
                resetPasswordToken?: string;
                registrationToken?: string;
                isActive?: boolean;
                roles?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      code?: string;
                      description?: string;
                      users?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      permissions?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            action?: string;
                            actionParameters?: unknown;
                            subject?: string;
                            properties?: unknown;
                            conditions?: unknown;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                      };
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  }[];
                };
                blocked?: boolean;
                preferedLanguage?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        SiteConfigResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["SiteConfig"];
        };
        SiteConfigResponse: {
          data?: components["schemas"]["SiteConfigResponseDataObject"];
          meta?: Record<string, never>;
        };
        MiscSocialMediaComponent: {
          id?: number;
          socialMediaProvider?: string;
          socialMediaLink?: string;
          socialMediaIcon?: string;
        };
        SiteConfigContactInfoComponent: {
          id?: number;
          address?: string;
          zipCode?: string;
          city?: string;
          state?: string;
          emailAddress?: string;
          phoneNumber?: string;
          availability?: string;
        };
        SiteConfigAdvancedRequest: {
          data: {
            nextRevalidationCallback_dev?: string;
            nextRevalidationCallback_prod?: string;
            netlify_fullRebuildEndpoint?: string;
          };
        };
        SiteConfigAdvancedListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["SiteConfigAdvanced"];
        };
        SiteConfigAdvancedListResponse: {
          data?: components["schemas"]["SiteConfigAdvancedListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        SiteConfigAdvanced: {
          nextRevalidationCallback_dev?: string;
          nextRevalidationCallback_prod?: string;
          netlify_fullRebuildEndpoint?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: {
                firstname?: string;
                lastname?: string;
                username?: string;
                /** Format: email */
                email?: string;
                resetPasswordToken?: string;
                registrationToken?: string;
                isActive?: boolean;
                roles?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      code?: string;
                      description?: string;
                      users?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      permissions?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            action?: string;
                            actionParameters?: unknown;
                            subject?: string;
                            properties?: unknown;
                            conditions?: unknown;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                      };
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  }[];
                };
                blocked?: boolean;
                preferedLanguage?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        SiteConfigAdvancedResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["SiteConfigAdvanced"];
        };
        SiteConfigAdvancedResponse: {
          data?: components["schemas"]["SiteConfigAdvancedResponseDataObject"];
          meta?: Record<string, never>;
        };
        StaticLlmSnippetRequest: {
          data: {
            llmSnippet?: components["schemas"]["LlmLlmSnippetComponent"][];
          };
        };
        StaticLlmSnippetListResponseDataItem: {
          id?: number;
          attributes?: components["schemas"]["StaticLlmSnippet"];
        };
        StaticLlmSnippetListResponse: {
          data?: components["schemas"]["StaticLlmSnippetListResponseDataItem"][];
          meta?: {
            pagination?: {
              page?: number;
              pageSize?: number;
              pageCount?: number;
              total?: number;
            };
          };
        };
        StaticLlmSnippet: {
          llmSnippet?: components["schemas"]["LlmLlmSnippetComponent"][];
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
          createdBy?: {
            data?: {
              id?: number;
              attributes?: {
                firstname?: string;
                lastname?: string;
                username?: string;
                /** Format: email */
                email?: string;
                resetPasswordToken?: string;
                registrationToken?: string;
                isActive?: boolean;
                roles?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      code?: string;
                      description?: string;
                      users?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                      };
                      permissions?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            action?: string;
                            actionParameters?: unknown;
                            subject?: string;
                            properties?: unknown;
                            conditions?: unknown;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                      };
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  }[];
                };
                blocked?: boolean;
                preferedLanguage?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            };
          };
          updatedBy?: {
            data?: {
              id?: number;
              attributes?: Record<string, never>;
            };
          };
        };
        StaticLlmSnippetResponseDataObject: {
          id?: number;
          attributes?: components["schemas"]["StaticLlmSnippet"];
        };
        StaticLlmSnippetResponse: {
          data?: components["schemas"]["StaticLlmSnippetResponseDataObject"];
          meta?: Record<string, never>;
        };
        LlmLlmSnippetComponent: {
          id?: number;
          snippetContent?: string;
        };
        UploadFile: {
          id?: number;
          name?: string;
          alternativeText?: string;
          caption?: string;
          /** Format: integer */
          width?: number;
          /** Format: integer */
          height?: number;
          formats?: number;
          hash?: string;
          ext?: string;
          mime?: string;
          /** Format: double */
          size?: number;
          url?: string;
          previewUrl?: string;
          provider?: string;
          provider_metadata?: Record<string, never>;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
        };
        "Users-Permissions-Role": {
          id?: number;
          name?: string;
          description?: string;
          type?: string;
          /** Format: date-time */
          createdAt?: string;
          /** Format: date-time */
          updatedAt?: string;
        };
        "Users-Permissions-User": {
          /** @example 1 */
          id?: number;
          /** @example foo.bar */
          username?: string;
          /** @example foo.bar@strapi.io */
          email?: string;
          /** @example local */
          provider?: string;
          /** @example true */
          confirmed?: boolean;
          /** @example false */
          blocked?: boolean;
          /**
           * Format: date-time
           * @example 2022-06-02T08:32:06.258Z
           */
          createdAt?: string;
          /**
           * Format: date-time
           * @example 2022-06-02T08:32:06.267Z
           */
          updatedAt?: string;
        };
        "Users-Permissions-UserRegistration": {
          /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
          jwt?: string;
          user?: components["schemas"]["Users-Permissions-User"];
        };
        "Users-Permissions-PermissionsTree": {
          [key: string]: {
            /** @description every controller of the api */
            controllers?: {
              [key: string]: {
                [key: string]: {
                  enabled?: boolean;
                  policy?: string;
                };
              };
            };
          };
        };
      };
      responses: never;
      parameters: never;
      requestBodies: {
        "Users-Permissions-RoleRequest": {
          content: {
            /** @example {
             *       "name": "foo",
             *       "description": "role foo",
             *       "permissions": {
             *         "api::content-type.content-type": {
             *           "controllers": {
             *             "controllerA": {
             *               "find": {
             *                 "enabled": true
             *               }
             *             }
             *           }
             *         }
             *       }
             *     } */
            "application/json": {
              name?: string;
              description?: string;
              type?: string;
              permissions?: components["schemas"]["Users-Permissions-PermissionsTree"];
            };
          };
        };
      };
      headers: never;
      pathItems: never;
    }
    type $defs = Record<string, never>;
    interface operations {
      "get/articles": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["ArticleListResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "post/articles": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["ArticleRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["ArticleResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/articles/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["ArticleResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/articles/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["ArticleRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["ArticleResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/articles/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/articles-page": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["ArticlesPageResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/articles-page": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["ArticlesPageRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["ArticlesPageResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/articles-page": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/events": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["EventListResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "post/events": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["EventRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["EventResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/events/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["EventResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/events/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["EventRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["EventResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/events/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/funders": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["FunderListResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "post/funders": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["FunderRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["FunderResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/funders/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["FunderResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/funders/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["FunderRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["FunderResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/funders/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/galleries": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["GalleryListResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "post/galleries": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["GalleryRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["GalleryResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/galleries/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["GalleryResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/galleries/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["GalleryRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["GalleryResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/galleries/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/home-page": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["HomePageResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/home-page": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["HomePageRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["HomePageResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/home-page": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/llm-snippets": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["LlmSnippetListResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "post/llm-snippets": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["LlmSnippetRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["LlmSnippetResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/llm-snippets/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["LlmSnippetResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/llm-snippets/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["LlmSnippetRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["LlmSnippetResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/llm-snippets/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/media-page": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["MediaPageResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/media-page": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["MediaPageRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["MediaPageResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/media-page": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/members": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["MemberListResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "post/members": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["MemberRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["MemberResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/members/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["MemberResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/members/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["MemberRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["MemberResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/members/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/membership-page": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["MembershipPageResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/membership-page": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["MembershipPageRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["MembershipPageResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/membership-page": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/podcast-episodes": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["PodcastEpisodeListResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "post/podcast-episodes": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["PodcastEpisodeRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["PodcastEpisodeResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/podcast-episodes/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["PodcastEpisodeResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/podcast-episodes/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["PodcastEpisodeRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["PodcastEpisodeResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/podcast-episodes/{id}": {
        parameters: {
          query?: never;
          header?: never;
          path: {
            id: number;
          };
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/site-config": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["SiteConfigResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/site-config": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["SiteConfigRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["SiteConfigResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/site-config": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/site-config-advanced": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["SiteConfigAdvancedResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/site-config-advanced": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["SiteConfigAdvancedRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["SiteConfigAdvancedResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/site-config-advanced": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "get/static-llm-snippet": {
        parameters: {
          query?: {
            /** @description Sort by attributes ascending (asc) or descending (desc) */
            sort?: string;
            /** @description Return page/pageSize (default: true) */
            "pagination[withCount]"?: boolean;
            /** @description Page number (default: 0) */
            "pagination[page]"?: number;
            /** @description Page size (default: 25) */
            "pagination[pageSize]"?: number;
            /** @description Offset value (default: 0) */
            "pagination[start]"?: number;
            /** @description Number of entities to return (default: 25) */
            "pagination[limit]"?: number;
            /** @description Fields to return (ex: title,author) */
            fields?: string;
            /** @description Relations to return */
            populate?: string;
            /** @description Filters to apply */
            filters?: {
              [key: string]: unknown;
            };
            /** @description Locale to apply */
            locale?: string;
          };
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["StaticLlmSnippetResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "put/static-llm-snippet": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody: {
          content: {
            "application/json": components["schemas"]["StaticLlmSnippetRequest"];
          };
        };
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["StaticLlmSnippetResponse"];
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
      "delete/static-llm-snippet": {
        parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
        };
        requestBody?: never;
        responses: {
          /** @description OK */
          200: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": number;
            };
          };
          /** @description Bad Request */
          400: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Unauthorized */
          401: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Forbidden */
          403: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Not Found */
          404: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
          /** @description Internal Server Error */
          500: {
            headers: {
              [name: string]: unknown;
            };
            content: {
              "application/json": components["schemas"]["Error"];
            };
          };
        };
      };
    }
  }
}

export {};
